{
  "_args": [
    [
      {
        "raw": "react-notification@git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
        "scope": null,
        "escapedName": "react-notification",
        "name": "react-notification",
        "rawSpec": "git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
        "spec": "git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:BerkeleyTrue/react-notification.git#freecodecamp",
          "sshUrl": "git+ssh://git@github.com/BerkeleyTrue/react-notification.git#freecodecamp",
          "httpsUrl": "git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
          "gitUrl": "git://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
          "shortcut": "github:BerkeleyTrue/react-notification#freecodecamp",
          "directUrl": "https://raw.githubusercontent.com/BerkeleyTrue/react-notification/freecodecamp/package.json"
        }
      },
      "/home/trung.gm.vn/FreeCodeCamp"
    ]
  ],
  "_from": "git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
  "_id": "react-notification@5.0.6",
  "_inCache": true,
  "_location": "/react-notification",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-notification@git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
    "scope": null,
    "escapedName": "react-notification",
    "name": "react-notification",
    "rawSpec": "git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
    "spec": "git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:BerkeleyTrue/react-notification.git#freecodecamp",
      "sshUrl": "git+ssh://git@github.com/BerkeleyTrue/react-notification.git#freecodecamp",
      "httpsUrl": "git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
      "gitUrl": "git://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
      "shortcut": "github:BerkeleyTrue/react-notification#freecodecamp",
      "directUrl": "https://raw.githubusercontent.com/BerkeleyTrue/react-notification/freecodecamp/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/BerkeleyTrue/react-notification.git#0c503b92a92cc1db843e6f8802d6d8b292546b5e",
  "_shasum": "6c6767ae3eed85c56f3949a9bd2d12b1a72f47b4",
  "_shrinkwrap": null,
  "_spec": "react-notification@git+https://github.com/BerkeleyTrue/react-notification.git#freecodecamp",
  "_where": "/home/trung.gm.vn/FreeCodeCamp",
  "author": {
    "name": "Patrick Burtchaell",
    "email": "patrick@pburtchaell.com",
    "url": "pburtchaell.com"
  },
  "bugs": {
    "url": "https://github.com/pburtchaell/react-notification/issues"
  },
  "dependencies": {},
  "description": "Snackbar style notification component for React.",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-core": "^6.7.2",
    "babel-eslint": "^6.0.0",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "chai": "^3.5.0",
    "chai-enzyme": "^0.4.1",
    "enzyme": "^2.1.0",
    "eslint": "^2.5.1",
    "eslint-config-airbnb": "^6.2.0",
    "eslint-plugin-react": "^4.2.3",
    "express": "^4.13.4",
    "express-urlrewrite": "^1.2.0",
    "html-webpack-plugin": "^2.10.0",
    "immutable": "^3.8.1",
    "jsdom": "^8.5.0",
    "mocha": "^2.4.5",
    "react": "^0.14.7",
    "react-addons-test-utils": "^0.14.7",
    "react-dom": "^0.14.7",
    "sinon": "^1.17.3",
    "webpack": "^1.12.14",
    "webpack-dev-middleware": "^1.5.1",
    "webpack-dev-server": "^1.14.1"
  },
  "gitHead": "0c503b92a92cc1db843e6f8802d6d8b292546b5e",
  "homepage": "https://github.com/pburtchaell/react-notification",
  "keywords": [
    "react",
    "component",
    "react-component",
    "components",
    "ui",
    "notify",
    "notification",
    "snackbar"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "react-notification",
  "optionalDependencies": {},
  "readme": "# react-notification\n\n[![npm version](https://badge.fury.io/js/react-notification.svg)](http://badge.fury.io/js/react-notification) [![Dependency Status](https://david-dm.org/pburtchaell/react-notification.svg)](https://david-dm.org/pburtchaell/react-notification) [![Build Status](https://travis-ci.org/pburtchaell/react-notification.svg)](https://travis-ci.org/pburtchaell/react-notification) [![npm downloads](https://img.shields.io/npm/dm/react-notification.svg?style=flat)](http://badge.fury.io/js/react-notification)\n\n## Overview\n\n![](https://raw.githubusercontent.com/pburtchaell/react-notification/master/examples/example.gif)\n![](https://raw.githubusercontent.com/pburtchaell/react-notification/master/examples/stack.gif)\n\nThis is a component designed to provide \"[snackbar](http://www.google.com/design/spec/components/snackbars-toasts.html#snackbars-toasts-usage)\" notification messages and notification stacks (similar to how notifications stack on OS X). I would suggest reading the usage guidelines for [snackbars](http://www.google.com/design/spec/components/snackbars-toasts.html#).\n\n## Getting Started\n\nInstall the component via npm: `npm install react-notification`.\n\nIf you are using the React 0.13.x or lower, you can install the previously compatible version of this component with `npm i react-notification@2.3.0 -S`. The current version only works with React 0.14.x.\n\nPlease read the [contributing guide](/CONTRUBUTING.md) if you are interested in contributing. If you are coming from version 1.0.0, there is an [upgrade guide](/UPGRADING.md) to help you make the switch. If you have questions, please feel free to create an issue on GitHub.\n\nNote the component uses `Object.assign`. If you are compiling with Babel, you should include the Babel Polyfill in your build to ensure the method works.\n\n## Usage\n\nSingle notification:\n\n```js\nimport { Notification } from 'react-notification';\n\n<Notification\n  isActive={boolean}\n  message={string}\n  action={string}\n  onClick={myClickHander}\n/>\n```\n\nNotification stack:\n\n```js\nimport { NotificationStack } from 'react-notification';\nimport { OrderedSet } from 'immutable';\n\nconstructor () {\n  super();\n  this.state = {\n    notifications: OrderedSet()\n  };\n}\n\naddNotification () {\n  const newCount = count + 1;\n  return this.setState({\n    notifications: this.state.notifications.add({\n      message: `Notification ipsum...`,\n      key: 'some UID',\n      action: 'Dismiss',\n      onClick: () => this.removeNotification('some UID'),\n    })\n  });\n}\n\nremoveNotification (count) {\n  this.setState({\n    notifications: this.state.notifications.filter(n => n.key !== count)\n  })\n}\n\nrender () {\n  return (\n    <NotificationStack\n      notifications={this.state.notifications.toArray()}\n      onDismiss={notification => this.setState({\n        notifications: this.state.notifications.delete(notification)\n      })}\n    />\n  );\n}\n```\n\nSee the [examples](examples/notification-tree) for more context on how to use a notification stack.\n\n### Props\n\nFor Notification component:\n\n| Name            | Type                    | Description                                                 | Required  | Default                    |\n|-----------------|-------------------------|-------------------------------------------------------------|-----------|----------------------------|\n| isActive        | boolean                 | If true, the notification is visible                        | true      | `false`                    |\n| message         | string or React element | The message or component for the notification               | true      |                            |\n| title           | string                  | The title for the notification                              |           |                            |\n| action          | string                  | The name of the action, e.g., \"close\" or \"undo\"             |           |                            |\n| style           | boolean                 | Setting this prop to `false` will disable all inline styles |           |                            |\n| barStyle        | object                  | Custom snackbar styles                                      |           |                            |\n| activeBarStyle  | object                  | Custom snackbar styles when the bar is active               |           |                            |\n| actionStyle     | object                  | Custom action styles                                        |           |                            |\n| className       | string                  | Custom class to apply to the top-level component            |           |                            |\n| activeClassName | string                  | Custom class to apply to the top-level component when active|           | `'notification-bar-active'`|\n| dismissAfter    | number                  | Timeout for onDismiss event                                 |           | `2000`                     |\n\nThe `style` prop useful if you are not using React inline styles and would like to use CSS instead. See [styles](#styles) for more.\n\nFor NotificationStack component:\n\n| Name           | Type  | Description                                  | Required  | Default  |\n|----------------|-------|----------------------------------------------|---------- |----------|\n| notifications  | array | Array of notifications to render             | true      |          |\n| barStyle       | func  | create the style of the notification         | false     | fn       |\n| activeBarStyle | func  | create the style of the active notification  | false     | fn       |\n\n**Update** `v5.0.3`: Now notifications used in a stack _can_ have all properties included in the regular notification component.\n\n## Events\n\nFor Notification component:\n\n| Event     | Description                                                |\n|-----------|------------------------------------------------------------|\n| onClick   | Callback function to run when the action is clicked        |\n| onDismiss | Callback function to run when dismissAfter timer runs out  |\n\nFor NotificationStack component:\n\n| Event     | Description                                                                  | Arguments                                                 |\n|-----------|------------------------------------------------------------------------------|-----------------------------------------------------------|\n| onDismiss | Callback function to run when dismissAfter timer runs out for a notification | The object for the notification currently being dismissed |\n\n## Styles\n\nThis component does use basic inline CSS to style the position and visibility of the notification. You have two options for adding additional styles:\n\n1. Remove all inline styles and use only CSS.\n2. Add additional inline styles via the style prop.\n\nThe DOM tree of the component for reference:\n\n```html\n<div class=\"notification-bar\">\n  <div class=\"notification-bar-wrapper\" onClick={this.props.onClick}>\n    <span class=\"notification-bar-message\">{this.props.message}</span>\n    <span class=\"notification-bar-action\">{this.props.action}</span>\n  </div>\n</div>\n```\n\nTo use additional inline styles, return two objects. The `bar` object applies styles to the entire notification \"snackbar\" and the `action` object applies styles to the action message. Under the hood, this uses `Object.assign` to handle properly combining styles.\n\nI would highly suggest using this method since the styles included in the component by default handle the visibility of the notification. If you remove these styles, the component won't actually show or hide itself.\n\n### barStyle and activeBarStyle NotificationStack props\n\nThese two function have the following signature:\n\n```js\n(index: Number, style: Object|Void) => Object\n```\n\nWhere `index` is the index of the notifiction in the notifictions array and\n`style` is the style property of the individual notification.\n\nThis function is used to dynamically set the style of each notification in the\nstack. The default function adds the `bottom` style property to correctly\nposition of the notification in a stack.\n\n```js\nfunction defaultStyleFactory(index, style) {\n  return Object.assign(\n    {},\n    style,\n    { bottom: `${2 + index * 4}rem` }\n  );\n}\n```\n\n---\nBuilt with care in New Orleans by [Patrick Burtchaell](http://twitter.com/pburtchaell).\n\nCopyright 2016 Patrick Burtchaell. Licensed MIT. [Gratipay](https://gratipay.com/~pburtchaell/).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https+git://github.com/pburtchaell/react-notification"
  },
  "scripts": {
    "build": "`npm bin`/babel src -d dist",
    "prepublish": "npm test && npm run build",
    "start": "node examples/server.js",
    "test": "make test"
  },
  "version": "5.0.6"
}
